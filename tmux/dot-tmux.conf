# vi: set ft=tmux

# Plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'MunifTanjim/tmux-suspend'
set -g @plugin 'MunifTanjim/tmux-mode-indicator'

# Shell
set-option -g default-shell /bin/zsh

# On 2024-03-29, I noticed that creating new panes/windows/sessions was
# extremely slow — as in 24 seconds, during which time input in other panes
# would behave very erratically (like printing the literal characters I'm
# typing instead of parsing them as Tmux or Vim commands, but doing so
# inconsistently). This was caused by slow login shell startup in Zsh. The GitHub
# comment linked below suggested that launching login shells (the default Tmux
# behaviour) is slower than launching non-login shells, and so I set Tmux to
# launch non-login shells instead. This immediately solved the problem, but I
# don't understand what caused it in the first place. exec -l zsh reproduces
# the problem but zsh --login does not. Some debugging revealed that the main
# culprits are /usr/libexec/path_helper -s (a known troublemaker; see
# https://unix.stackexchange.com/questions/22979/path-helper-and-zsh) and
# /opt/homebrew/bin/brew shellenv zsh. It remains to be seen whether this
# solution has undesirable side effects.
# https://github.com/tmux/tmux/issues/1087#issuecomment-331949035
set-option -g default-command "${SHELL}"

# Fix copying
if-shell 'test "$(uname -s)" != Darwin' \
    'set -g set-clipboard on'

# Respond to non-alphanumeric chars faster (e.g. in Vim)
# Rationale: https://github.com/tmux/tmux/issues/907 search "escape-time"
set -g escape-time 10

set -g display-panes-time 3000
set -g display-time 3000

# Required for vim-gitgutter
set -g focus-events on

# More sensible window splitting & creation
bind '"' split-window -v -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Make a nice grid of four windows. Mnemonic: "quad"
bind -N 'Split the window into four' Q split-window -h -c "#{pane_current_path}" \; \
  split-window -v -c "#{pane_current_path}" \; \
  select-pane -L \; \
  split-window -v -c "#{pane_current_path}"

bind A set-window-option synchronize-panes # 'a' for 'all'

bind X confirm-before 'kill-server'

# Add "notes" to session chooser
bind -N 'Set a note for this window' N command-prompt -p 'Add note to this window:' 'set -w @note "%%%"'
bind S choose-tree -wF '#{?@note,#[fg=red]#{@note}#[default] ,}#{?session_attached,(attached) ,}'
bind s choose-tree -swF '#{?@note,#[fg=red]#{@note}#[default] ,}#{?session_attached,(attached) ,}'

bind -N 'Create or switch to session with name' C command-prompt -p 'Create or switch to session name:' 'new-session -As %%'
bind -N 'Create session for process' R command-prompt -p 'Create session for process:' 'new-session -s %1 %1'
bind -N 'Change session working directory' P command-prompt -p 'Change session working directory to:' 'attach-session -t . -c %%'

bind -N 'Set an environment variable for this window' E command-prompt -p 'Set variable name:','Set variable value:' 'run-shell "tmux set-environment TMUX_USER_ENV_%1 %2'

# Useful for tracking down open files in Vim!
bind -N 'Switch to window running a given PID' W command-prompt -p "Switch to pane with pid:" "run-shell 'pane=\$(ps eww %% | sed \"1d; s/^.*TMUX_PANE=//;s/ .*//\"); [[ -z \$pane ]] && tmux display-message \"could not find pid\" || tmux switch-client -t \$pane'"

# TODO: If necessary, check first if tmux-256color is available, else fallback to screen-256color.
# Two approaches:
# 1. find /usr/share/terminfo -type f | grep 'tmux-256color$'
# 2. infocmp tmux-256color (check output)
set -g default-terminal "tmux-256color"
# set -g default-terminal "screen-256color"

# Status bar
set -g status-justify centre
set -g status-left "#{tmux_mode_indicator} #S"
set -g status-left-length 20
set -g status-right "« #h: #W »"
setw -g status-fg colour16
setw -g status-bg colour8
setw -g window-status-format '#[bg=colour8 fg=colour3]#I:#[fg=colour16]#W #F'
setw -g window-status-current-format '#[bg=colour1 fg=colour7]#I:#W #F'
set-option -g allow-rename off
set-option -g renumber-windows on
set -g pane-border-indicators off
set -g pane-border-status bottom
setw -g pane-border-format '↳ #I.#P:#[fg=colour13]#{pane_current_command}#[fg=default] (#(echo "#{pane_current_path}" | rev | cut -d'/' -f-2 | rev)) #F'
set -g base-index 1
set -g pane-base-index 1

set -g detach-on-destroy off

# Let panes remain in place when their command exits.
set -g remain-on-exit on
# When a pane's command exits, check if it's the final pane in the session.
# If so, respawn; else kill the pane.
# Credit to nicm on Freenode #tmux.
set-hook -g pane-died "if -F '#{&&:#{==:#{session_windows},1},#{==:#{window_panes},1}}' 'respawn-pane' 'kill-pane'"

# Screen behaviour
set -g history-limit 40000

# Mouse mode!
set -g mouse on

# Vim mode!
set -g mode-keys vi
unbind h
bind h if-shell -F "#{window_zoomed_flag}" 'select-pane -L; resize-pane -Z' 'select-pane -L'
unbind j
bind j if-shell -F "#{window_zoomed_flag}" 'select-pane -D; resize-pane -Z' 'select-pane -D'
unbind k
bind k if-shell -F "#{window_zoomed_flag}" 'select-pane -U; resize-pane -Z' 'select-pane -U'
unbind l
bind l if-shell -F "#{window_zoomed_flag}" 'select-pane -R; resize-pane -Z' 'select-pane -R'
bind Escape copy-mode

bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'V' send -X select-line
bind -T copy-mode-vi 'r' send -X rectangle-toggle
bind -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# Keep this at the bottom!
run -b '~/.tmux/plugins/tpm/tpm'
